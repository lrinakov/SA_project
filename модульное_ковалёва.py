# -*- coding: utf-8 -*-
"""модульное_ковалёва.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1EkZs6ULDR0i5tASaleMTzDu4vSofZObq
"""

!pip install -U flask-restful
!pip install -U pyngrok
!pip install dnspython
!pip install mongoengine

from pyngrok import ngrok

ngrok_token = '2qZUVRO5jogTo4eDLGA2uUuzYEk_EBc85d3Y9Q6v56RHjcGa'
ngrok.set_auth_token(ngrok_token)
port = "5000"

import numpy as np
from mongoengine import *

mydb = 'kovaleva'

connect(host="mongodb+srv://cluster24.cfl8e.mongodb.net",
                 username = "hciuser2024",
                 password="VGLQAENYMKJFrjUX",
                 db = mydb)

from jinja2 import Template
from IPython.core.display import display, HTML

import os
from flask import Flask, request, jsonify
from flask_restful import Resource, Api
from datetime import datetime
import requests

app = Flask(__name__)

ngrok_tunnel = ngrok.connect(port)
public_url = ngrok_tunnel.public_url
print(f" * ngrok tunnel \"{public_url}\" -> \"http://127.0.0.1:{port}\"")

app.config["BASE_URL"] = public_url
api = Api(app)

class Fake(Document):
    p_id = IntField(required=True, unique=True)
    name = StringField(required=True)
    status = StringField(default="В Ожидании",choices=["В Ожидании","В Работе","Завершена"])
    subtasks = ListField()
    difficulty= IntField(default=0, min_value=0, max_value=10)
    date = DateField(default=datetime.now())
    deadline = DateField()
    physical_state = StringField(choices=["Отдохнувший", "Уставший", "Энергичный", "Сонный", "Нормальный"])
    mood = StringField(choices=["Хорошее", "Нейтральное", "Плохое"])
    stress_level = IntField(min_value=0, max_value=10)

ProjectA = Fake(p_id=123,name= 'App development',
         subtasks=['User research', 'Requirement creation', 'Development', 'Usability testing'],
         difficulty= 7, date= "2025-06-18", deadline="2025-10-28").save()

ProjectB = Fake(p_id=1234,name= 'HR report',
         subtasks=['Statistics concolidation', 'Dashboard prerparation', 'Presentation'],
         status='Завершена', difficulty = 4, date= "2025-06-18", deadline="2025-10-18").save()

@app.route("/")
def home():
    return "<h3>You have entered the main page. You are authorized as user.</h3> <br> <h2>Enjoy your work!! </h2>"

@app.route('/project/<pr_id>', methods=['GET'])
def get_project(pr_id):
    project = Fake.objects.get(p_id=pr_id)
    project_data = {
            'name': project.name,
            'status': project.status,
            'subtasks': project.subtasks,
            'difficulty': project.difficulty,
            'date': project.date,
            'deadline': project.deadline,
            }
    return Template(tmpl_pr).render(project_data)

@app.route('/project', methods=['POST'])
def create_project():
    data = request.get_json()
    if not data or 'p_id' not in data or 'name' not in data:
        return jsonify({'error': 'p_id и name обязательны'}), 400
    if Fake.objects(p_id=data['p_id']).first():
        return jsonify({'error': 'Задача с таким p_id уже существует'}), 400
    project = Fake(
        p_id=data['p_id'],
        name=data['name'],
        status=data.get('status', 'Pending'),
        subtasks=data.get('subtasks', []),
        difficulty=data.get('difficulty', 0),
        date=data.get('date', datetime.now()),
        deadline=data.get('deadline')
    )
    project.save()
    return jsonify({'message': 'Задача успешно создана', 'p_id': project.p_id}), 201

@app.route('/project/<int:pr_id>/complete', methods=['PATCH'])
def complete_project(pr_id):
    project = Fake.objects(p_id=pr_id).first()
    if not project:
        return jsonify({'error': 'Задача не найдена'}), 404

    data = request.get_json()
    if not data:
        return jsonify({'error': 'Ожидается JSON с данными состояния пользователя'}), 400

    physical_state = data.get('physical_state')
    mood = data.get('mood')
    stress_level = data.get('stress_level')

    if stress_level is not None and (not isinstance(stress_level, int) or stress_level < 0 or stress_level > 10):
        return jsonify({'error': 'Поле stress_level должно быть целым числом от 0 до 10'}), 400

    project.status = "Завершена"
    if physical_state:
        project.physical_state = physical_state
    if mood:
        project.mood = mood
    if stress_level is not None:
        project.stress_level = stress_level

    project.save()
    return jsonify({
        'p_id': project.p_id,
        'status': project.status,
        'user_feedback': {
            'physical_state': project.physical_state,
            'mood': project.mood,
            'stress_level': project.stress_level
        }
    }), 200

@app.route('/analytics', methods=['GET'])
def get_analytics():
    try:
        end_date = datetime.now().date()
        start_date = end_date - timedelta(days=6)

        start_str = start_date.strftime("%Y-%m-%d")
        end_str = end_date.strftime("%Y-%m-%d")

        daily_load = []
        for i in range(7):
            day = start_date + timedelta(days=i)
            daily_load.append({
                'date': day.strftime("%Y-%m-%d"),
                'tasks_completed': random.randint(0, 5),
                'average_difficulty': random.randint(1, 5)
            })

        insights = {
            'most_productive_day': max(daily_load, key=lambda x: x['tasks_completed'])['date'],
            'avg_difficulty': round(sum(d['average_difficulty'] for d in daily_load) / len(daily_load), 2),
            'avg_tasks_per_day': round(sum(d['tasks_completed'] for d in daily_load) / len(daily_load), 2),
            'user_state': random.choice(['В норме', 'Перегружен', 'Нужен отдых'])
        }

        return jsonify({
            'period': {'start': start_str, 'end': end_str},
            'daily_load': daily_load,
            'insights': insights,
            'diagram': 'В будущем здесь появится автоматически генерируемая визуализация аналитики.'
        })
    except Exception as e:
        return jsonify({'error': str(e)}), 500

@app.route('/recommendations', methods=['GET'])
def get_recommendations():
    return jsonify({
        'recommendations': [
        {
            'category': 'Нагрузка',
            'advice': 'Уменьшите количество задач с высоким уровнем сложности в первой половине недели.'
        },
        {
            'category': 'Отдых',
            'advice': 'Добавьте 1 день без задач после особенно загруженных дней.'
        },
        {
            'category': 'Оптимизация',
            'advice': 'Сгруппируйте похожие задачи по типу и выполняйте их блоками для повышения фокуса.'
        },
        {
            'category': 'Продуктивность',
            'advice': 'Планируйте сложные задачи утром, когда уровень концентрации выше.'
        }
    ]
    })

import json
json_data = Fake.objects.to_json()
dicts = json.loads(json_data)
dicts

app.run()

disconnect()